#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ä–µ–∂–∏–º–æ–º.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —à–∞–±–ª–æ–Ω–∞–º–∏.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏–∏.
"""

import streamlit as st
import pandas as pd
import subprocess
import tempfile
import os
import uuid
from pathlib import Path
from typing import List, Dict, Any, Optional
import time

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from modules.db import DB
from modules.audit_standart import check_contract_standardness, STATUS_STANDARD, STATUS_NONSTANDARD, STATUS_UNKNOWN


def get_session_id() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã —Å–µ—Å—Å–∏–π Streamlit.

    Returns:
        str: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
    """
    if 'session_id' not in st.session_state:
        st.session_state.session_id = str(uuid.uuid4())
    return st.session_state.session_id


def classify_similarity(similarity_score: Optional[float]) -> tuple[str, str]:
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Å—Ö–æ–∂–µ—Å—Ç–∏.

    Returns:
        tuple[status, color]: —Å—Ç–∞—Ç—É—Å –∏ —Ü–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if similarity_score is None or similarity_score == 0:
        return "üî¥ –ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å", "gray"
    elif 0.9 <= similarity_score <= 1.0:
        return "üü¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É", "green"
    elif 0.8 <= similarity_score < 0.9:
        return "üü° –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–∞–º", "orange"
    else:
        return "üî¥ –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É (–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)", "red"


def get_classification_results(session_id: str) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏.

    Args:
        session_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    try:
        db = DB()
        results = db.get_classification_results_by_session(
            session_id, limit=100)
        return results
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []


def get_all_templates() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é."""
    try:
        db = DB()
        templates = db.get_all_templates()
        return templates
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        return []


def update_user_choice(doc_id: str, template_id: str) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    try:
        db = DB()
        return db.update_user_choice(doc_id, template_id)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞: {e}")
        return False


def get_document_data(doc_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        db = DB()
        with db._conn() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT 
                        di.id,
                        di.name,
                        di.version,
                        di.created_at,
                        di.similarity_score,
                        di.session_id,
                        di.user_choice_doc_id,
                        t.id as template_id,
                        t.name as template_name,
                        t.version as template_version
                    FROM docs_inserted di
                    LEFT JOIN templates t ON di.user_choice_doc_id = t.id
                    WHERE di.id = %s
                """, (doc_id,))

                row = cur.fetchone()
                if row:
                    return {
                        "doc_id": row[0],
                        "doc_name": row[1],
                        "doc_version": row[2],
                        "created_at": row[3],
                        "similarity_score": float(row[4]) if row[4] else None,
                        "session_id": row[5],
                        "user_choice_doc_id": row[6],
                        "template_id": row[7],
                        "template_name": row[8],
                        "template_version": row[9]
                    }
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return None


def get_template_chunks(template_id: str) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        db = DB()
        with db._conn() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT chunk_id, ord, heading, text
                    FROM template_chunks
                    WHERE template_id = %s
                    ORDER BY ord
                """, (template_id,))

                chunks = []
                for row in cur.fetchall():
                    chunks.append({
                        "chunk_id": row[0],
                        "order": row[1],
                        "heading": row[2],
                        "text": row[3]
                    })
                return chunks
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤ —à–∞–±–ª–æ–Ω–∞: {e}")
        return []


def save_edited_document(doc_id: str, edited_chunks: List[Dict[str, Any]]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    try:
        db = DB()
        with db._conn() as conn:
            with conn.cursor() as cur:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —á–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                cur.execute("""
                    DELETE FROM docs_inserted_chunks 
                    WHERE doc_id = %s
                """, (doc_id,))

                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —á–∞–Ω–∫–∏
                for i, chunk in enumerate(edited_chunks):
                    chunk_id = f"{doc_id}:{i}"
                    cur.execute("""
                        INSERT INTO docs_inserted_chunks(chunk_id, doc_id, ord, heading, text, embedding)
                        VALUES (%s, %s, %s, %s, %s, %s)
                    """, (chunk_id, doc_id, i, chunk.get("heading", ""), chunk["text"], "[]"))

        conn.commit()
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return False


def run_classification(uploaded_files: List, temp_dir: str, session_id: str) -> bool:
    """
    –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å–µ—Å—Å–∏–∏.

    Args:
        uploaded_files: –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        temp_dir: –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤
        session_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π session_id
        cmd = [
            "python", "classification.py",
            "--input-dir", temp_dir,
            "--sbert-path", "./models/sbert_large_nlu_ru",
            "--similar_id", "0.80",  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "--embedding-dim", "1024",
            "--chunk-size", "350",
            "--batch-size", "16",  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            "--device", "cpu",
            "--use-db",
            "--session-id", session_id,  # –ü–µ—Ä–µ–¥–∞–µ–º session_id –≤ —Å–∫—Ä–∏–ø—Ç
            "--document-weight", "0.70",
            "--title-weight", "0.30"
        ]

        # –ó–∞–ø—É—Å–∫ –≤ conda –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        conda_cmd = ["conda", "run", "-n", "corp_pp_doc"] + cmd

        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."):
            result = subprocess.run(
                conda_cmd,
                capture_output=True,
                text=True,
                cwd=Path(__file__).parent
            )

        if result.returncode == 0:
            st.success("üü¢ –î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            return True
        else:
            st.error(f"üî¥ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.stderr}")
            return False

    except Exception as e:
        st.error(f"üî¥ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False


def clear_session_data(session_id: str) -> bool:
    """
    –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Args:
        session_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        bool: True –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        db = DB()
        db.clear_session_data(session_id)
        st.success("üü¢ –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã!")
        return True
    except Exception as e:
        st.error(f"üî¥ –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def get_document_full_text(doc_id: str) -> Optional[str]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —á–∞–Ω–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    Args:
        doc_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞

    Returns:
        str: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        db = DB()
        with db._conn() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT text
                    FROM docs_inserted_chunks 
                    WHERE doc_id = %s
                    ORDER BY ord
                """, (doc_id,))

                chunks = cur.fetchall()
                if chunks:
                    return ' '.join([chunk[0] for chunk in chunks])
                return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return None


def perform_standard_audit(doc_id: str) -> Optional[Dict[str, Any]]:
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.

    Args:
        doc_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞

    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å –∫–ª—é—á–∞–º–∏ 'status', 'violations', 'document_text'
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document_text = get_document_full_text(doc_id)
        if not document_text:
            return {
                'status': STATUS_UNKNOWN,
                'violations': [],
                'document_text': '',
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞'
            }

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏
        status, violations = check_contract_standardness(document_text)

        return {
            'status': status,
            'violations': violations,
            'document_text': document_text,
            'error': None
        }
    except Exception as e:
        return {
            'status': STATUS_UNKNOWN,
            'violations': [],
            'document_text': '',
            'error': str(e)
        }


def show_audit_mode():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    st.title("üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏ –¥–æ–≥–æ–≤–æ—Ä–∞")
    st.markdown("---")

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", help="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"):
        st.session_state.audit_mode = False
        if 'audit_results' in st.session_state:
            del st.session_state.audit_results
        st.rerun()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    if 'audit_results' not in st.session_state:
        st.error("üî¥ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏.")
        return

    doc_data = st.session_state.selected_doc
    audit_results = st.session_state.audit_results

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    st.subheader("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    col1, col2 = st.columns(2)

    with col1:
        st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {doc_data['doc_name']}")
        st.write(f"**ID –¥–æ–∫—É–º–µ–Ω—Ç–∞:** `{doc_data['doc_id'][:8]}...`")

    with col2:
        st.write(f"**–®–∞–±–ª–æ–Ω:** {doc_data['template_name'] or '–ù–µ –≤—ã–±—Ä–∞–Ω'}")
        similarity_display = f"{doc_data['similarity_score']*100:.1f}%" if doc_data['similarity_score'] else "0%"
        st.write(f"**–°—Ö–æ–∂–µ—Å—Ç—å —Å —à–∞–±–ª–æ–Ω–æ–º:** {similarity_display}")

    st.markdown("---")

    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    if audit_results.get('error'):
        st.error(f"üî¥ –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {audit_results['error']}")
        return

    status = audit_results['status']
    violations = audit_results['violations']

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ü–≤–µ—Ç–æ–º
    st.write("**üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏:**")
    if status == STATUS_STANDARD:
        st.success(f"üü¢ **{status}**")
        st.info(
            "–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ –¥–æ–≥–æ–≤–æ—Ä–∞. –ù–∞—Ä—É—à–µ–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
    elif status == STATUS_NONSTANDARD:
        st.error(f"üî¥ **{status}**")
        st.warning(
            "–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã –¥–æ–≥–æ–≤–æ—Ä–∞. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.")
    else:  # STATUS_UNKNOWN
        st.info(f"üî¥ **{status}**")
        st.warning(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞.")

    # –°–≤–æ–¥–∫–∞ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    if violations:
        st.write("**üìä –°–≤–æ–¥–∫–∞:**")
        col_summary1, col_summary2, col_summary3 = st.columns(3)

        with col_summary1:
            st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π", len(violations))

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π
        categories = {}
        for violation in violations:
            desc = violation['description']
            if "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è" in desc.lower():
                categories['–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è'] = categories.get(
                    '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è', 0) + 1
            elif "—Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã" in desc.lower():
                categories['–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã'] = categories.get(
                    '–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã', 0) + 1
            elif "–ø—Ä–µ–¥–æ–ø–ª–∞—Ç" in desc.lower() or "–∞–≤–∞–Ω—Å" in desc.lower():
                categories['–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞'] = categories.get('–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞', 0) + 1
            elif "–ø—Ä–∏–µ–º–∫–∏" in desc.lower():
                categories['–ü—Ä–∏–µ–º–∫–∞ —Ä–∞–±–æ—Ç'] = categories.get(
                    '–ü—Ä–∏–µ–º–∫–∞ —Ä–∞–±–æ—Ç', 0) + 1
            elif "–ø–ª–∞—Ç–µ–∂–Ω—ã–π –¥–µ–Ω—å" in desc.lower():
                categories['–ü–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–Ω–∏'] = categories.get(
                    '–ü–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–Ω–∏', 0) + 1
            elif "–ø—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å" in desc.lower():
                categories['–ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π'] = categories.get(
                    '–ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π', 0) + 1
            else:
                categories['–ü—Ä–æ—á–∏–µ'] = categories.get('–ü—Ä–æ—á–∏–µ', 0) + 1

        with col_summary2:
            if categories:
                st.write("**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π:**")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                for category, count in list(categories.items())[:3]:
                    st.write(f"‚Ä¢ {category}: {count}")

        with col_summary3:
            if len(categories) > 3:
                st.write("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                for category, count in list(categories.items())[3:]:
                    st.write(f"‚Ä¢ {category}: {count}")
    else:
        st.write("**üìä –°–≤–æ–¥–∫–∞:**")
        st.success(
            "üü¢ –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ!")

    st.markdown("---")

    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ - –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
    with st.expander("üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏", expanded=False):
        st.markdown("""
        ### üîç **–ß–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏**
        
        #### **1. –§–æ—Ä–º–∞ –∏ —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞**
        - **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–≥–æ–≤–æ—Ä—ë–Ω–Ω—ã–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å–º. –ø. 2‚Äì4 –Ω–∏–∂–µ)
        - **–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** –ø—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π/–≤–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –∏–∑ –ø–µ—Ä–µ—á–Ω—è –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö; –¥–æ–≥–æ–≤–æ—Ä –ø–æ —Ñ–æ—Ä–º–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
        - **–°–∏–≥–Ω–∞–ª—ã:** —É–ø–æ–º–∏–Ω–∞–Ω–∏—è ¬´–ø—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π¬ª, ¬´–ø–æ —Ñ–æ—Ä–º–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞¬ª, ¬´–Ω–µ –ø–æ —Ñ–æ—Ä–º–µ, —É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–π...¬ª
        
        #### **2. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞**
        - **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** —Å—Ä–æ–∫ –Ω–µ –±–æ–ª–µ–µ 3 –ª–µ—Ç, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω–µ—á–Ω–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π –¥–∞—Ç–æ–π; –±–µ–∑ –±–µ—Å—Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ –∞–≤—Ç–æ–ø—Ä–æ–ª–æ–Ω–≥–∞—Ü–∏–∏
        - **–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** —Å—Ä–æ–∫ > 3 –ª–µ—Ç, –±–µ—Å—Å—Ä–æ—á–Ω–æ, ¬´–¥–æ –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è¬ª, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–ª–æ–Ω–≥–∞—Ü–∏—è
        - **–ò—Å–∫–ª—é—á–µ–Ω–∏—è:** –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ 3 –ª–µ—Ç –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–ª–æ–Ω–≥–∞—Ü–∏—è —Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ–º/–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ EDM
        
        #### **3. –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã**
        - **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** ‚â• 60 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏/—Ä–∞–±–æ—Ç/—É—Å–ª—É–≥ (–µ—Å–ª–∏ –∏–Ω–æ–µ –Ω–µ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–æ –∑–∞–∫–æ–Ω–æ–º –†–§)
        - **–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** < 60 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π –∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º—É –∑–∞–∫–æ–Ω–∞ –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        
        #### **4. –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (–∞–≤–∞–Ω—Å)**
        - **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏—è:** –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø. 6.6: –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ –ü–æ–ª–æ–∂–µ–Ω–∏—é –æ –ø–æ–ª–Ω–æ–º–æ—á–∏—è—Ö, –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è, –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –ø–æ –ø–æ—Ä–æ–≥–∞–º, –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ —é—Ä–ø–æ–¥–¥–µ—Ä–∂–∫–∏/–∫–æ–º–ø–ª–∞–µ–Ω—Å–∞/–∫–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–∞ –∏ –¥—Ä.
        - **–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π 6.6 (–Ω–µ—Ç –ë–ì –ø—Ä–∏ –ø–æ—Ä–æ–≥–µ, –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–π/–∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –ø—Ä.)
        
        #### **5. –°—Ä–æ–∫ –ø—Ä–∏—ë–º–∫–∏ —Ä–∞–±–æ—Ç/—É—Å–ª—É–≥**
        - **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** ‚â• 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π; –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–∞–Ω—å—à–µ. –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø—Ä–µ–¥–º–µ—Ç ‚Äî —Ä–∞–±–æ—Ç—ã/—É—Å–ª—É–≥–∏
        - **–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** < 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ä–∞–±–æ—Ç/—É—Å–ª—É–≥
        
        #### **6. –ü–ª–∞—Ç—ë–∂–Ω—ã–π –¥–µ–Ω—å**
        - **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** –æ–¥–∏–Ω –ø–ª–∞—Ç—ë–∂–Ω—ã–π –¥–µ–Ω—å –≤ –Ω–µ–¥–µ–ª—é –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º –ö–æ–º–ø–∞–Ω–∏–∏
        - **–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** –∏–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Å–ª–æ–≤–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Ç—Ä–µ–±—É–µ–º–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º
        
        #### **7. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –¥–æ–≥–æ–≤–æ—Ä–µ (—á—Ç–æ–±—ã –æ–Ω –æ—Å—Ç–∞–≤–∞–ª—Å—è ¬´—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º¬ª)**
        **–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ:**
        - —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã (–∏–ª–∏ –≤–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã) ‚Äî –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π 6.6
        - —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –ø—Ä–∏—ë–º–∫–∏, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ 5 –†–î
        - –≤–≤–µ–¥–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ó–∞–∫–∞–∑—á–∏–∫–∞, —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∑–∞ —Å—Ä–æ–∫–∏
        - –∏–∑–º–µ–Ω–µ–Ω–∏–µ/—É—Ç–æ—á–Ω–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –∏ –ø–æ—Ä—è–¥–∫–∞ –∏—Å—á–∏—Å–ª–µ–Ω–∏—è
        
        **–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** –ª—é–±—ã–µ –∏–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π
        
        #### **8. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–ø—Å–æ–≥–ª–∞—à–µ–Ω–∏–∏ (—á—Ç–æ–±—ã –æ–Ω–æ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å ¬´—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º¬ª)**
        **–†–∞–∑—Ä–µ—à–µ–Ω—ã:** –ª–∏–º–∏—Ç (–¥–ª—è —Ä–∞–º–æ—á–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞), —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è, —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã/–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (—Å 6.6), —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –ø—Ä–∏—ë–º–∫–∏, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–∫–∏/—É—Å–ª—É–≥/—Ä–∞–±–æ—Ç, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å—Ç–æ—Ä–æ–Ω –∏ –¥–æ–≥–æ–≤–æ—Ä–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ó–∞–∫–∞–∑—á–∏–∫–∞
        
        **–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** –≤—ã—Ö–æ–¥ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å
        
        #### **9. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ/–¢–ó**
        **–î–æ–ª–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å:** –ø—Ä–µ–¥–º–µ—Ç, —Ü–µ–Ω—É, —Å—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏/—Ä–∞–±–æ—Ç/—É—Å–ª—É–≥, –ø–æ—Ä—è–¥–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ (–µ—Å–ª–∏ –æ—Ç–Ω–µ—Å–µ–Ω–æ –∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–º), —É—Å–ª–æ–≤–∏—è/–∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏/–æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥, –¥–æ–ø—É—Å–∫–∞–µ–º—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ/–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ (—Å 6.6), —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ó–∞–∫–∞–∑—á–∏–∫–∞ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É –æ–ø–ª–∞—Ç—ã, –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å—Ä–æ–∫, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —É—Å–ª–æ–≤–∏—è –∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        
        **–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ:** —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å–ª–æ–≤–∏—è, –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä–æ–º, –ª–∏–±–æ –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        #### **10. –†–∞–º–æ—á–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä**
        –ü—Ä–∏–∑–Ω–∞—ë—Ç—Å—è —Ä–∞–º–æ—á–Ω—ã–º –ø—Ä–∏ –æ–ø–∏—Å–∞–Ω–Ω–æ–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø—Ä–∏—Ä–æ–¥–µ –ø—Ä–∞–≤–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π; –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è —É—Å–ª–æ–≤–∏–π –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–æ–ø—ã/—Å–ø–µ–∫–∏ (—Å–º. –ø. 8‚Äì9)
        """)

    # –î–µ—Ç–∞–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if violations:
        st.markdown("---")
        st.subheader("üö® –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è")

        for i, violation in enumerate(violations, 1):
            with st.expander(f"–ù–∞—Ä—É—à–µ–Ω–∏–µ {i}: {violation['description']}", expanded=True):
                if violation['found_text']:
                    st.code(violation['found_text'], language='text')
                else:
                    st.write("*–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ*")

# –°–≤–æ–¥–∫–∞ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

# –°—Ç–∞—Ä—ã–π —Ä–∞–∑–¥–µ–ª –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –ø–æ–∫–∞–∑–∞–Ω –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã


def show_edit_mode():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    st.title("üìù –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    st.markdown("---")

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", help="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"):
        st.session_state.edit_mode = False
        st.rerun()

    doc_data = st.session_state.selected_doc
    doc_id = doc_data['doc_id']

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –ë–î
    full_doc_data = get_document_data(doc_id)
    if not full_doc_data:
        st.error("üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    st.subheader("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ")

    col1, col2, col3 = st.columns(3)

    with col1:
        st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {full_doc_data['doc_name']}")
        st.write(f"**ID –¥–æ–∫—É–º–µ–Ω—Ç–∞:** `{doc_id[:8]}...`")

    with col2:
        st.write(
            f"**–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {full_doc_data['created_at'].strftime('%d.%m.%Y %H:%M') if full_doc_data['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        st.write(f"**ID —Å–µ—Å—Å–∏–∏:** `{full_doc_data['session_id'][:8]}...`")

    with col3:
        similarity_display = f"{full_doc_data['similarity_score']*100:.1f}%" if full_doc_data['similarity_score'] else "0%"
        st.write(f"**–°—Ö–æ–∂–µ—Å—Ç—å:** {similarity_display}")
        st.write(
            f"**–®–∞–±–ª–æ–Ω:** {full_doc_data['template_name'] or '–ù–µ –≤—ã–±—Ä–∞–Ω'}")

    st.markdown("---")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
    if not full_doc_data['user_choice_doc_id']:
        st.warning(
            "üü° –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
        st.info(
            "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π '–û–ö'.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫–∏ —à–∞–±–ª–æ–Ω–∞
    template_chunks = get_template_chunks(full_doc_data['user_choice_doc_id'])
    if not template_chunks:
        st.warning("üü° –®–∞–±–ª–æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∞–Ω–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    st.subheader("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    st.write(
        f"**–®–∞–±–ª–æ–Ω:** {full_doc_data['template_name']} (v{full_doc_data['template_version'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'})")
    st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤:** {len(template_chunks)}")

    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edited_chunks = []

    for i, chunk in enumerate(template_chunks):
        st.markdown(f"### –ß–∞–Ω–∫ {i + 1}")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞–Ω–∫–∞
        heading = st.text_input(
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞–Ω–∫–∞ {i + 1}:",
            value=chunk.get("heading", ""),
            key=f"edit_heading_{i}"
        )

        # –¢–µ–∫—Å—Ç —á–∞–Ω–∫–∞
        text = st.text_area(
            f"–¢–µ–∫—Å—Ç —á–∞–Ω–∫–∞ {i + 1}:",
            value=chunk.get("text", ""),
            height=200,
            key=f"edit_text_{i}",
            help="–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç —á–∞–Ω–∫–∞ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
        )

        edited_chunks.append({
            "heading": heading,
            "text": text
        })

        st.markdown("---")

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col_save, col_preview, col_cancel = st.columns(3)

    with col_save:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary"):
            if save_edited_document(doc_id, edited_chunks):
                st.success("üü¢ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            else:
                st.error("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    with col_preview:
        if st.button("üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"):
            st.subheader("üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            for i, chunk in enumerate(edited_chunks):
                if chunk["heading"]:
                    st.markdown(f"### {chunk['heading']}")
                st.write(chunk["text"])
                if i < len(edited_chunks) - 1:
                    st.markdown("---")

    with col_cancel:
        if st.button("üî¥ –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
            st.rerun()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.info("""
    **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:**
    
    ‚Ä¢ **–ó–∞–≥–æ–ª–æ–≤–∫–∏ —á–∞–Ω–∫–æ–≤** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    ‚Ä¢ **–¢–µ–∫—Å—Ç —á–∞–Ω–∫–æ–≤** - –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    ‚Ä¢ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ** - –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    ‚Ä¢ **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä** - –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    """)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    total_chars = sum(len(chunk["text"]) for chunk in edited_chunks)
    total_words = sum(len(chunk["text"].split()) for chunk in edited_chunks)

    col_stat1, col_stat2, col_stat3 = st.columns(3)

    with col_stat1:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤", len(edited_chunks))

    with col_stat2:
        st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤", total_chars)

    with col_stat3:
        st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤", total_words)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ä–µ–∂–∏–º–æ–º."""
    st.set_page_config(
        page_title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ò–ò",
        page_icon="üìÑ",
        layout="wide"
    )

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
    session_id = get_session_id()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏
    if st.session_state.get('audit_mode', False) and 'selected_doc' in st.session_state:
        show_audit_mode()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if st.session_state.get('edit_mode', False) and 'selected_doc' in st.session_state:
        show_edit_mode()
        return

    # st.title("üë• –°–∏—Å—Ç–µ–º–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º)")
    st.title("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    st.subheader("–°–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤")
    st.markdown("---")

    # # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
    # with st.expander("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏", expanded=False):
    #     st.write(f"**ID —Å–µ—Å—Å–∏–∏:** `{session_id}`")
    #     st.write(
    #         "**–û–ø–∏—Å–∞–Ω–∏–µ:** –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
    #     st.write(
    #         "**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    with st.sidebar:
        # –õ–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ (–æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        st.markdown('<div style="text-align: center;">',
                    unsafe_allow_html=True)
        st.image("logo/logo_w.svg", width=300)
        st.markdown('</div>', unsafe_allow_html=True)
        st.markdown("---")

        # st.header("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        st.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

        uploaded_files = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            type=['docx', 'pdf', 'txt'],
            accept_multiple_files=True,
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .docx, .pdf, .txt"
        )

        if uploaded_files:
            st.write(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded_files)}")
            for file in uploaded_files:
                st.write(f"‚Ä¢ {file.name}")

        process_button = st.button(
            "üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã",
            disabled=not uploaded_files,
            type="primary"
        )
        # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å

        # # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
        # st.markdown("---")
        # st.subheader("üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
        # if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏", help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"):
        #     if clear_session_data(session_id):
        #         st.rerun()

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([2, 1])

    with col1:
        # st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        st.info("‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if process_button and uploaded_files:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            with tempfile.TemporaryDirectory() as temp_dir:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for uploaded_file in uploaded_files:
                    file_path = os.path.join(temp_dir, uploaded_file.name)
                    with open(file_path, "wb") as f:
                        f.write(uploaded_file.getbuffer())

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å–µ—Å—Å–∏–∏
                if run_classification(uploaded_files, temp_dir, session_id):
                    st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ë–î –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        results = get_classification_results(session_id)

        if results:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            df_data = []
            for result in results:
                similarity_score = result.get('similarity_score')
                status, color = classify_similarity(similarity_score)

                df_data.append({
                    "üìÑ –î–æ–∫—É–º–µ–Ω—Ç": result['doc_name'],
                    "üìÖ –î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏": result['created_at'].strftime("%d.%m.%Y %H:%M") if result['created_at'] else "",
                    "üìà –°—Ö–æ–∂–µ—Å—Ç—å": f"{similarity_score*100:.1f}%" if similarity_score else "0%",
                    "üéØ –°—Ç–∞—Ç—É—Å": status,
                    "üìã –®–∞–±–ª–æ–Ω": result['template_name'] or "–ù–µ –Ω–∞–π–¥–µ–Ω",
                    "üÜî ID –¥–æ–∫—É–º–µ–Ω—Ç–∞": result['doc_id'][:8] + "..." if result['doc_id'] else ""
                })

            df = pd.DataFrame(df_data)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            st.dataframe(
                df,
                use_container_width=True,
                hide_index=True,
                column_config={
                    "üìà –°—Ö–æ–∂–µ—Å—Ç—å": st.column_config.TextColumn(
                        "üìà –°—Ö–æ–∂–µ—Å—Ç—å",
                        help="–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–æ–º"
                    ),
                    "üéØ –°—Ç–∞—Ç—É—Å": st.column_config.TextColumn(
                        "üéØ –°—Ç–∞—Ç—É—Å",
                        help="–°—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                    )
                }
            )

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
            st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
            all_templates = get_all_templates()
            template_options = {"---": None}
            for template in all_templates:
                template_options[f"{template['name']} (v{template['version']})"] = template['id']

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            for i, result in enumerate(results[:5]):
                similarity_score = result.get('similarity_score')
                status, color = classify_similarity(similarity_score)

                with st.expander(f"üìÑ {result['doc_name']}", expanded=(i == 0)):
                    col_a, col_b = st.columns(2)

                    with col_a:
                        st.write("**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                        st.write(
                            f"‚Ä¢ –î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['created_at'].strftime('%d.%m.%Y %H:%M') if result['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                        st.write(f"‚Ä¢ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: `{result['doc_id']}`")
                        st.write(
                            f"‚Ä¢ ID —Å–µ—Å—Å–∏–∏: `{result.get('session_id', 'N/A')}`")

                        if similarity_score:
                            st.metric(
                                "–°—Ö–æ–∂–µ—Å—Ç—å —Å —à–∞–±–ª–æ–Ω–æ–º",
                                f"{similarity_score*100:.1f}%",
                                delta=None
                            )
                        else:
                            st.metric("–°—Ö–æ–∂–µ—Å—Ç—å —Å —à–∞–±–ª–æ–Ω–æ–º", "0%")

                    with col_b:
                        st.write("**–ù–∞–π–¥–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω:**")
                        if result['template_name']:
                            st.write(f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {result['template_name']}")
                            st.write(
                                f"‚Ä¢ ID —à–∞–±–ª–æ–Ω–∞: `{result['template_id']}`")
                            # st.write(
                            #     f"‚Ä¢ –í–µ—Ä—Å–∏—è: {result['template_version'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                        else:
                            st.write("‚Ä¢ –ü–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

                    # –°—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–º
                    if color == "green":
                        st.success(status)
                    elif color == "orange":
                        st.warning(status)
                    elif color == "red":
                        st.error(status)
                    else:
                        st.info(status)

                    # –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
                    st.markdown("---")
                    st.write("**üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:**")

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    default_key = "---"
                    if result['template_name'] and result['template_id']:
                        # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –≤ template_options
                        for key, value in template_options.items():
                            if value == result['template_id']:
                                default_key = key
                                break

                    selected_template_key = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                        options=list(template_options.keys()),
                        index=list(template_options.keys()).index(default_key),
                        key=f"template_select_{result['doc_id']}",
                        help="–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É"
                    )

                    selected_template_id = template_options[selected_template_key]

                    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                    col_btn1, col_btn2 = st.columns(2)

                    with col_btn1:
                        if st.button(
                            "üü¢ –û–ö",
                            key=f"confirm_{result['doc_id']}",
                            help="–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —à–∞–±–ª–æ–Ω, –¥–∞–ª—å–Ω–µ–π—à–∞—è —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"
                        ):
                            if selected_template_id:
                                if update_user_choice(result['doc_id'], selected_template_id):
                                    st.success(
                                        f"üü¢ –®–∞–±–ª–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {result['doc_name']}")
                                    st.rerun()
                                else:
                                    st.error("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞")
                            else:
                                st.warning(
                                    "üü° –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

                    with col_btn2:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        doc_has_confirmed_template = result.get(
                            'user_choice_doc_id') is not None

                        if st.button(
                            "‚û°Ô∏è –ü–†–û–î–û–õ–ñ–ò–¢–¨",
                            key=f"continue_{result['doc_id']}",
                            disabled=not doc_has_confirmed_template,
                            help="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–Ω–∞–ª–∏–∑—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏ –¥–æ–≥–æ–≤–æ—Ä–∞" if doc_has_confirmed_template else "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π '–û–ö'"
                        ):
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ session_state
                            st.session_state.selected_doc = {
                                'doc_id': result['doc_id'],
                                'doc_name': result['doc_name'],
                                'template_id': result.get('user_choice_doc_id'),
                                'template_name': result.get('template_name'),
                                'similarity_score': similarity_score,
                                'session_id': result.get('session_id')
                            }

                            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏
                            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏ –¥–æ–≥–æ–≤–æ—Ä–∞..."):
                                audit_results = perform_standard_audit(
                                    result['doc_id'])
                                if audit_results:
                                    st.session_state.audit_results = audit_results
                                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏
                                    st.session_state.audit_mode = True
                                    st.rerun()
                                else:
                                    st.error(
                                        "üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Å—Ç–∏")

        else:
            st.info(
                "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.")

    with col2:
        st.info("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**")

        if results:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_docs = len(results)
            classified_docs = len(
                [r for r in results if r.get('similarity_score')])

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –æ–¥–Ω–æ–π –ø–ª–∞—à–∫–µ
            if classified_docs > 0:
                success_rate = (classified_docs / total_docs) * 100
                st.info(f"""
                **–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {total_docs}
                
                **–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ:** {classified_docs}
                
                **–ü—Ä–æ—Ü–µ–Ω—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:** {success_rate:.1f}%
                """)
            else:
                st.info(f"""
                **–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** {total_docs}
                
                **–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ:** {classified_docs}
                """)

                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                categories = {
                    "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç (90-100%)": 0,
                    "–í–µ—Ä–æ—è—Ç–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç (80-90%)": 0,
                    "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç (0-80%)": 0,
                    "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ": 0
                }

                for result in results:
                    score = result.get('similarity_score')
                    if score is None or score == 0:
                        categories["–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ"] += 1
                    elif 0.9 <= score <= 1.0:
                        categories["–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç (90-100%)"] += 1
                    elif 0.8 <= score < 0.9:
                        categories["–í–µ—Ä–æ—è—Ç–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç (80-90%)"] += 1
                    else:
                        categories["–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç (0-80%)"] += 1

                st.info("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
                for category, count in categories.items():
                    if count > 0:
                        percentage = (count / total_docs) * 100
                        st.write(
                            f"{category}: **{count}** ({percentage:.1f}%)")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        st.info("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**")
        st.info("""
        **–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:**\n

        ‚Ä¢ **90-100%** - –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É\n
        ‚Ä¢ **80-90%** - –î–æ–∫—É–º–µ–Ω—Ç —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–∞–º\n  
        ‚Ä¢ **0-80%** - –î–æ–∫—É–º–µ–Ω—Ç —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É (–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)\n
        ‚Ä¢ **0% (null)** - –ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å\n
        
        **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:** –°–∏—Å—Ç–µ–º–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–π —à–∞–±–ª–æ–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å—Ö–æ–∂–µ—Å—Ç–∏.\n
        –ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: 80% (–¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –º–µ–Ω—å—à–µ–π —Å—Ö–æ–∂–µ—Å—Ç—å—é —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏).
        """)

        # st.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        # st.write("**–ú–æ–¥–µ–ª—å:** SBERT Large NLU RU")
        # st.write("**–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:** 1024")
        # st.write("**–†–µ–∂–∏–º:** –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π")

        # # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        # if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", help="–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"):
        #     st.rerun()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
        st.info("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏**")
        st.info(f"**ID —Å–µ—Å—Å–∏–∏:** `{session_id}`")
        # st.write(f"**–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ—Å—Å–∏–∏:** {len(results) if results else 0}")


if __name__ == "__main__":
    main()
