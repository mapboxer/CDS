#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.
"""

import streamlit as st
import pandas as pd
from pathlib import Path
from typing import List, Dict, Any, Optional
import uuid

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from modules.db import DB


def get_session_id() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if 'session_id' not in st.session_state:
        st.session_state.session_id = str(uuid.uuid4())
    return st.session_state.session_id


def get_document_data(doc_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        db = DB()
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        with db._conn() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT 
                        di.id,
                        di.name,
                        di.version,
                        di.created_at,
                        di.similarity_score,
                        di.session_id,
                        di.user_choice_doc_id,
                        t.id as template_id,
                        t.name as template_name,
                        t.version as template_version
                    FROM docs_inserted di
                    LEFT JOIN templates t ON di.user_choice_doc_id = t.id
                    WHERE di.id = %s
                """, (doc_id,))

                row = cur.fetchone()
                if row:
                    return {
                        "doc_id": row[0],
                        "doc_name": row[1],
                        "doc_version": row[2],
                        "created_at": row[3],
                        "similarity_score": float(row[4]) if row[4] else None,
                        "session_id": row[5],
                        "user_choice_doc_id": row[6],
                        "template_id": row[7],
                        "template_name": row[8],
                        "template_version": row[9]
                    }
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return None


def get_template_chunks(template_id: str) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        db = DB()
        with db._conn() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT chunk_id, ord, heading, text
                    FROM template_chunks
                    WHERE template_id = %s
                    ORDER BY ord
                """, (template_id,))

                chunks = []
                for row in cur.fetchall():
                    chunks.append({
                        "chunk_id": row[0],
                        "order": row[1],
                        "heading": row[2],
                        "text": row[3]
                    })
                return chunks
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤ —à–∞–±–ª–æ–Ω–∞: {e}")
        return []


def save_edited_document(doc_id: str, edited_chunks: List[Dict[str, Any]]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    try:
        db = DB()
        with db._conn() as conn:
            with conn.cursor() as cur:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —á–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                cur.execute("""
                    DELETE FROM docs_inserted_chunks 
                    WHERE doc_id = %s
                """, (doc_id,))

                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —á–∞–Ω–∫–∏
                for i, chunk in enumerate(edited_chunks):
                    chunk_id = f"{doc_id}:{i}"
                    cur.execute("""
                        INSERT INTO docs_inserted_chunks(chunk_id, doc_id, ord, heading, text, embedding)
                        VALUES (%s, %s, %s, %s, %s, %s)
                    """, (chunk_id, doc_id, i, chunk.get("heading", ""), chunk["text"], "[]"))

        conn.commit()
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    st.set_page_config(
        page_title="–†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        page_icon="üìù",
        layout="wide"
    )

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Å—Å–∏–∏
    session_id = get_session_id()

    st.title("üìù –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    st.markdown("---")

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", help="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é"):
        st.rerun()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ session_state
    if 'selected_doc' not in st.session_state or not st.session_state.selected_doc:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        st.info(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–†–û–î–û–õ–ñ–ò–¢–¨'.")
        return

    doc_data = st.session_state.selected_doc
    doc_id = doc_data['doc_id']

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –ë–î
    full_doc_data = get_document_data(doc_id)
    if not full_doc_data:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    st.subheader("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ")

    col1, col2, col3 = st.columns(3)

    with col1:
        st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {full_doc_data['doc_name']}")
        st.write(f"**ID –¥–æ–∫—É–º–µ–Ω—Ç–∞:** `{doc_id[:8]}...`")

    with col2:
        st.write(
            f"**–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {full_doc_data['created_at'].strftime('%d.%m.%Y %H:%M') if full_doc_data['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        st.write(f"**ID —Å–µ—Å—Å–∏–∏:** `{full_doc_data['session_id'][:8]}...`")

    with col3:
        similarity_display = f"{full_doc_data['similarity_score']*100:.1f}%" if full_doc_data['similarity_score'] else "0%"
        st.write(f"**–°—Ö–æ–∂–µ—Å—Ç—å:** {similarity_display}")
        st.write(
            f"**–®–∞–±–ª–æ–Ω:** {full_doc_data['template_name'] or '–ù–µ –≤—ã–±—Ä–∞–Ω'}")

    st.markdown("---")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
    if not full_doc_data['user_choice_doc_id']:
        st.warning(
            "‚ö†Ô∏è –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
        st.info(
            "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π '–û–ö'.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫–∏ —à–∞–±–ª–æ–Ω–∞
    template_chunks = get_template_chunks(full_doc_data['user_choice_doc_id'])
    if not template_chunks:
        st.warning("‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∞–Ω–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    st.subheader("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    st.write(
        f"**–®–∞–±–ª–æ–Ω:** {full_doc_data['template_name']} (v{full_doc_data['template_version'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'})")
    st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤:** {len(template_chunks)}")

    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edited_chunks = []

    for i, chunk in enumerate(template_chunks):
        st.markdown(f"### –ß–∞–Ω–∫ {i + 1}")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞–Ω–∫–∞
        heading = st.text_input(
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞–Ω–∫–∞ {i + 1}:",
            value=chunk.get("heading", ""),
            key=f"heading_{i}"
        )

        # –¢–µ–∫—Å—Ç —á–∞–Ω–∫–∞
        text = st.text_area(
            f"–¢–µ–∫—Å—Ç —á–∞–Ω–∫–∞ {i + 1}:",
            value=chunk.get("text", ""),
            height=200,
            key=f"text_{i}",
            help="–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç —á–∞–Ω–∫–∞ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
        )

        edited_chunks.append({
            "heading": heading,
            "text": text
        })

        st.markdown("---")

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col_save, col_preview, col_cancel = st.columns(3)

    with col_save:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary"):
            if save_edited_document(doc_id, edited_chunks):
                st.success("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

    with col_preview:
        if st.button("üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"):
            st.subheader("üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            for i, chunk in enumerate(edited_chunks):
                if chunk["heading"]:
                    st.markdown(f"### {chunk['heading']}")
                st.write(chunk["text"])
                if i < len(edited_chunks) - 1:
                    st.markdown("---")

    with col_cancel:
        if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
            st.rerun()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.info("""
    **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:**
    
    ‚Ä¢ **–ó–∞–≥–æ–ª–æ–≤–∫–∏ —á–∞–Ω–∫–æ–≤** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    ‚Ä¢ **–¢–µ–∫—Å—Ç —á–∞–Ω–∫–æ–≤** - –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    ‚Ä¢ **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ** - –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    ‚Ä¢ **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä** - –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    """)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    total_chars = sum(len(chunk["text"]) for chunk in edited_chunks)
    total_words = sum(len(chunk["text"].split()) for chunk in edited_chunks)

    col_stat1, col_stat2, col_stat3 = st.columns(3)

    with col_stat1:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤", len(edited_chunks))

    with col_stat2:
        st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤", total_chars)

    with col_stat3:
        st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤", total_words)


if __name__ == "__main__":
    main()
